// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif
import struct Turf.Point

/// Error class for passing custom error details to Dart side.
final class NavigationListenersError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "NavigationListenersError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func createConnectionError(withChannelName channelName: String) -> GestureListenersError {
  return NavigationListenersError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class NavigationListenersPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return GestureState(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return Point.fromList(self.readValue() as! [Any?])
    case 131:
      return ScreenCoordinate.fromList(self.readValue() as! [Any?])
    case 132:
      return MapContentGestureContext.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class NavigationListenersPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? GestureState {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? Point {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ScreenCoordinate {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? MapContentGestureContext {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NavigationListenersPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NavigationListenersPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NavigationListenersPigeonCodecWriter(data: data)
  }
}

class NavigationListenersPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = NavigationListenersPigeonCodec(readerWriter: GestureListenersPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol NavigationListenerProtocol {
  func onNavigationRouteReady(completion: @escaping (Result<Void, NavigationListenersError>) -> Void)

  func onNavigationRouteFailed(completion: @escaping (Result<Void, NavigationListenersError>) -> Void)

  func onNavigationRouteCancelled(completion: @escaping (Result<Void, NavigationListenersError>) -> Void)

  func onNavigationRouteRendered(completion: @escaping (Result<Void, NavigationListenersError>) -> Void)

  func onNewLocation(NavigationLocation location, completion: @escaping (Result<Void, NavigationListenersError>) -> Void)

  func onRouteProgress(RouteProgress routeProgress, completion: @escaping (Result<Void, NavigationListenersError>) -> Void)

  func onNavigationCameraStateChanged(NavigationCameraState state, completion: @escaping (Result<Void, NavigationListenersError>) -> Void)
}
class NavigationListener: NavigationListenerProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: NavigationListenersPigeonCodec {
    return NavigationListenersPigeonCodec.shared
  }
  func onNavigationRouteReadycompletion: @escaping (Result<Void, NavigationListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.NavigationListener.onNavigationRouteReady\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(NavigationListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNavigationRouteFailed: @escaping (Result<Void, NavigationListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.NavigationListener.onNavigationRouteFailed\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(NavigationListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNavigationRouteCancelled: @escaping (Result<Void, NavigationListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.NavigationListener.onNavigationRouteCancelled\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(NavigationListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNavigationRouteRendered: @escaping (Result<Void, NavigationListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.NavigationListener.onNavigationRouteRendered\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(NavigationListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNewLocation(NavigationLocation location, completion: @escaping (Result<Void, GestureListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.NavigationListener.onNewLocation\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([location] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(GestureListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onRouteProgress(RouteProgress routeProgress, completion: @escaping (Result<Void, GestureListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.NavigationListener.onRouteProgress\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([routeProgress] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(GestureListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onNavigationCameraStateChanged(NavigationCameraState state, completion: @escaping (Result<Void, GestureListenersError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.mapbox_maps_flutter.NavigationListener.onNavigationCameraStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([state] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(GestureListenersError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
